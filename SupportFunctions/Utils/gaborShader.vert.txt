/* gaborShader.vert.txt
 * 
 * Shader for drawing of basic parameterized gabor patches.
 * Simplified & standardized to produce luminance gabor with Michelson contrast output
 * Removed [blasted] disableNorm parameter!
 *
 * This is the vertex shader. It takes the attributes (parameters)
 * provided by the Screen('DrawTexture(s)') command, performs some
 * basic calculations on it - the calculations that only need to be
 * done once per gabor patch and that can be reliably carried out
 * at sufficient numeric precision in a vertex shader - then it passes
 * results of computations and other attributes as 'varying' parameters
 * to the fragment shader.
 *
 * Based on: BasicGaborShader.frag.txt
 * (c) 2007 by Mario Kleiner, licensed under MIT license.
 *		 
 * 2018-04-13  TBC  Adapted & simplified.
 */

/* Constants that we need 2*pi and square-root of 2*pi: */
const float twopi     = 2.0 * 3.141592654;
const float sqrtof2pi = 2.5066282746;

/* Conversion factor from degrees to radians: */
const float deg2rad = 3.141592654 / 180.0;

/* Texel position of center of gabor patch: Constant, set from Matlab */
/* once when the shader is created: */
uniform vec2  Center;

/* Attributes passed from Screen(): See the ProceduralShadingAPI.m file for infos: */
attribute vec4 sizeAngleFilterMode;
attribute vec4 modulateColor;
attribute vec4 auxParameters0;

/* Information passed to the fragment shader: Attributes and precalculated per patch constants: */
varying float Angle;
varying float Phase;
varying vec2  coeff;
varying float Expmultiplier;
varying vec4  baseColor;

void main()
{
    /* Apply standard geometric transformations to patch: */
    gl_Position = ftransform();

    /* Don't pass real texture coordinates, but ones corrected for hardware offsets (-0.5,0.5) */
    /* and so that the center of the gabor patch has coordinate (0,0): */
    gl_TexCoord[0] = gl_MultiTexCoord0 - vec4(Center, 0.0, 0.0) + vec4(-0.5, 0.5, 0.0, 0.0);

    /* Contrast value is stored in auxParameters0[3]: */
    float Contrast = auxParameters0[3];
    /* Convert Angle and Phase from degrees to radians: */
    Angle = deg2rad * sizeAngleFilterMode.z;
    Phase = deg2rad * auxParameters0[0];

    /* Precalc a couple of per-patch constant parameters: */
    /* Compute (x,y) distance weighting coefficients, based on rotation angle: */
    /* Formerly done in fragment shader, but assume vertex shader of modern */
    /* hardware now has sufficient numeric precision to do it here (just once). */
    coeff = vec2(cos(Angle), sin(Angle)) * auxParameters0[1] * twopi;

    float SpaceConstant = auxParameters0[2];
    Expmultiplier = -0.5 / (SpaceConstant * SpaceConstant);

    /* Premultiply the wanted Contrast to the color: */
    baseColor = modulateColor * Contrast * 0.5;
}
